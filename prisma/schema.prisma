generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    id          Int         @id @default(autoincrement())
    password    String
    email       String?     @unique
    mobile      String      @unique
    role        RoleEnums   @default(APPLICANT)
    expertId    Int?        @unique
    expert      Experts?    @relation(fields: [expertId], references: [id])
    applicantId Int?        @unique
    applicant   Applicants? @relation(fields: [applicantId], references: [id])
    isAdmin     Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([expertId, applicantId, mobile, email])
}

enum RoleEnums {
    ADMIN
    EXPERT
    APPLICANT
}

model Experts {
    id                     Int                @id @default(autoincrement())
    firstName              String
    lastName               String
    nationalCode           String             @unique
    nationalCardImage      String?
    phoneNumber            String             @unique
    homeAddress            String?
    postalCode             String?
    bankShebaNumber        String?            @unique
    bankCardNumber         Int?               @unique
    carImage               String?
    carGreenCardImage      String?
    carPersonalAndCarImage String?
    isActive               Boolean            @default(false)
    jobs                   Jobs[]
    financialReports       FinancialReports[]
    users                  Users?
    subscription           Subscriptions?     @relation(fields: [subscriptionId], references: [id])
    subscriptionId         Int?
    createdAt              DateTime           @default(now())
    updatedAt              DateTime           @updatedAt

    @@index([id, subscriptionId])
}

model Jobs {
    id Int @id @default(autoincrement())

    expert    Experts? @relation(fields: [expertId], references: [id])
    expertId  Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FinancialReports {
    id Int @id @default(autoincrement())

    expert    Experts? @relation(fields: [expertId], references: [id])
    expertId  Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscriptions {
    id        Int       @id @default(autoincrement())
    experts   Experts[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Applicants {
    id        Int      @id @default(autoincrement())
    users     Users?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Services {
    id          Int        @id @default(autoincrement())
    title       String     @unique
    description String
    slug        String     @unique
    thumbnail   String?
    greenIcon   String?
    googleTitle String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    content     String?    @db.Text
    comments    Comments[]

    @@index([slug, id])
}

model Brands {
    id          Int        @id @default(autoincrement())
    title       String     @unique
    description String
    slug        String     @unique
    thumbnail   String?
    googleTitle String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    content     String?    @db.Text
    comments    Comments[]

    @@index([slug, id])
}

model Blogs {
    id          Int        @id @default(autoincrement())
    title       String     @unique
    googleTitle String?
    description String
    slug        String     @unique
    thumbnail   String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    content     String?    @db.Text
    comments    Comments[]

    @@index([slug, id])
}

model Comments {
    id          Int       @id @default(autoincrement())
    username    String
    phoneNumber String?
    score       Int?
    content     String?
    serviceId   Int?
    service     Services? @relation(fields: [serviceId], references: [id])
    blogId      Int?
    blog        Blogs?    @relation(fields: [blogId], references: [id])
    brandId     Int?
    brand       Brands?   @relation(fields: [brandId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isPublished Boolean   @default(false)
    adminAnswer String?

    @@index([blogId, brandId, serviceId])
}
